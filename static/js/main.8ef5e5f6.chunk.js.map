{"version":3,"sources":["business/Game/selectors.ts","models/Cell.ts","components/app-components/GameSetup/index.tsx","business/Game/actions.ts","business/Game/types.ts","models/GameStatus.ts","components/app-components/Cell/index.tsx","controller/MinesweeperController.ts","components/app-components/Board/index.tsx","components/app-components/GameStatus/index.tsx","components/app-components/GameBoard/index.tsx","business/Game/reducer.ts","store/rootReducer.ts","components/helpers/localStorage.tsx","store/index.js","store/configureStore.js","components/App/index.tsx","index.tsx"],"names":["CellStatus","boardSelector","state","minesweeper","game","board","gameStatus","status","withRouter","history","dispatch","useDispatch","useSelector","gameStatusSelector","useEffect","push","className","initialValues","rows","columns","level","validate","values","errors","onSubmit","levelWeight","bombs","Math","floor","type","payload","cols","validateOnMount","handleChange","handleBlur","handleSubmit","isValid","htmlFor","name","id","onChange","onBlur","value","maxLength","disabled","GameStatus","Cell","cell","onReveal","onFlag","cn","toLowerCase","onClick","event","preventDefault","onContextMenu","Revealed","neighborBombs","Exploded","Flagged","renderStatus","ResultingAction","Board","cells","map","row","rIndex","key","cIndex","GameStatusEnum","Playing","RevealCell","FlagCell","Won","MinesweeperController","col","bombsIndex","index","calcOneDimensionIndex","includes","result","r","calRow","c","calCol","calcHasBomb","reduce","prevCounter","filter","Covered","hasBomb","length","neighborCells","Array","options","maxTileNumber","numOfBombs","min","bombsIndexMapSet","Set","size","add","random","bombsIndexMap","from","calcNeighborBombs","rowCell","console","log","updateCell","Lost","newGame","calcCoveredCellsWithoutBomb","revealNeighborCells","getNeighborCells","neighborCell","revealCell","initialState","rootReducer","combineReducers","action","createGame","flagCell","store","preloadedState","composedEnhancers","composeWithDevTools","createStore","configureStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ef5e5f6.chunk.js","sourcesContent":["import { RootState } from 'store/rootReducer';\n\nexport const gameOptionsSelector = (state: RootState) =>\n  state.minesweeper.game?.options;\nexport const boardSelector = (state: RootState) =>\n  state.minesweeper.game?.board;\nexport const gameStatus = (state: RootState) => state.minesweeper.game?.status;\n","export enum CellStatus {\n  Covered,\n  Revealed,\n  Flagged,\n  Exploded,\n}\n\ninterface Cell {\n  row: number;\n  col: number;\n  hasBomb: boolean;\n  neighborBombs: number;\n  status: CellStatus;\n}\n\nexport default Cell;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Formik, FormikProps } from 'formik';\nimport { CreateGame } from 'business/Game/actions';\nimport { gameStatus as gameStatusSelector } from 'business/Game/selectors';\n\nimport './styles.scss';\nimport GameStatus from 'models/GameStatus';\n\ninterface FormValues {\n  rows: number;\n  columns: number;\n  level: string;\n}\n\ninterface FormError {\n  rows?: string;\n  columns?: string;\n  level?: string;\n}\n\nconst GameSetup: React.FC<RouteComponentProps> = ({ history }) => {\n  const dispatch = useDispatch();\n  const gameStatus = useSelector(gameStatusSelector) as GameStatus;\n  useEffect(() => {\n    if (gameStatus) {\n      history.push('/board');\n    }\n  }, [gameStatus, history]);\n\n  return (\n    <div className=\"game-setup\">\n      <Formik\n        initialValues={{\n          rows: 10,\n          columns: 12,\n          level: 'medium',\n        }}\n        validate={(values: FormValues) => {\n          const errors: FormError = {};\n          if (!values.rows || values.rows < 4) {\n            errors.rows = 'At least 4 rows are required';\n          }\n          if (!values.columns || values.columns < 4) {\n            errors.columns = 'At least 4 columns are required';\n          }\n          if (!values.level) {\n            errors.level = 'Please select a level';\n          }\n          return errors;\n        }}\n        onSubmit={(values: FormValues) => {\n          const levelWeight =\n            values.level === 'easy'\n              ? 0.1\n              : values.level === 'medium'\n              ? 0.2\n              : 0.4;\n          const bombs = Math.floor(values.columns * values.rows * levelWeight);\n          dispatch(\n            CreateGame({ rows: values.rows, cols: values.columns, bombs })\n          );\n          history.push('/board');\n        }}\n        validateOnMount\n      >\n        {({\n          values,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          errors,\n          isValid,\n        }: FormikProps<FormValues>) => (\n          <form className=\"game-setup__form\" onSubmit={handleSubmit}>\n            <h1 className=\"game-setup__header\">Minesweeper</h1>\n            <div className=\"game-setup__group\">\n              <label className=\"game-setup__label\" htmlFor=\"gameRows\">\n                Rows:\n                <br />\n                <input\n                  name=\"rows\"\n                  className=\"game-setup__input-text\"\n                  type=\"number\"\n                  id=\"gameRows\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.rows}\n                  maxLength={2}\n                />\n                {errors.rows && (\n                  <>\n                    <br />\n                    <span className=\"game-setup__error\">{errors.rows}</span>\n                  </>\n                )}\n              </label>\n            </div>\n            <div className=\"game-setup__group\">\n              <label className=\"game-setup__label\" htmlFor=\"gameColumns\">\n                Columns:\n                <br />\n                <input\n                  name=\"columns\"\n                  className=\"game-setup__input-text\"\n                  type=\"number\"\n                  id=\"gameColumns\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.columns}\n                  maxLength={2}\n                />\n                {errors.columns && (\n                  <>\n                    <br />\n                    <span className=\"game-setup__error\">{errors.columns}</span>\n                  </>\n                )}\n              </label>\n            </div>\n            <div className=\"game-setup__group\">\n              <label className=\"game-setup__label\" htmlFor=\"gameLevel\">\n                Level:\n                <br />\n                <select\n                  name=\"level\"\n                  className=\"game-setup__input-text\"\n                  id=\"gameLevel\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.level}\n                >\n                  <option value=\"easy\">Easy</option>\n                  <option value=\"medium\">Medium</option>\n                  <option value=\"hard\">Hard</option>\n                </select>\n              </label>\n              {errors.level && (\n                <>\n                  <br />\n                  <span className=\"game-setup__error\">{errors.level}</span>\n                </>\n              )}\n            </div>\n            <div className=\"game-setup__button-group\">\n              <button\n                type=\"submit\"\n                disabled={!isValid}\n                className=\"game-setup__button\"\n              >\n                Save\n              </button>\n            </div>\n          </form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default withRouter(GameSetup);\n","import {\n  CREATE_GAME,\n  GameActions,\n  REVEAL_CELL,\n  FLAG_CELL,\n  RESET_GAME,\n} from './types';\nimport GameOptions from 'models/GameOptions';\nimport Cell from 'models/Cell';\n\nexport function CreateGame(gameOptions: GameOptions): GameActions {\n  return {\n    type: CREATE_GAME,\n    payload: gameOptions,\n  };\n}\n\nexport function RevealCell(cell: Cell): GameActions {\n  return {\n    type: REVEAL_CELL,\n    payload: cell,\n  };\n}\n\nexport function FlagCell(cell: Cell): GameActions {\n  return {\n    type: FLAG_CELL,\n    payload: cell,\n  };\n}\n\nexport function ResetGame(): GameActions {\n  return {\n    type: RESET_GAME,\n  };\n}\n","import GameOptions from 'models/GameOptions';\nimport Game from 'models/Game';\nimport Cell from 'models/Cell';\n\nexport const CREATE_GAME = 'CREATE_GAME';\nexport const REVEAL_CELL = 'REVEAL_CELL';\nexport const FLAG_CELL = 'FLAG_CELL';\nexport const RESET_GAME = 'RESET_GAME';\n\ninterface CreateGameAction {\n  type: typeof CREATE_GAME;\n  payload: GameOptions;\n}\n\ninterface RevealCellAction {\n  type: typeof REVEAL_CELL;\n  payload: Cell;\n}\n\ninterface FlagCellAction {\n  type: typeof FLAG_CELL;\n  payload: Cell;\n}\n\ninterface ResetGameAction {\n  type: typeof RESET_GAME;\n}\n\nexport type GameActions =\n  | CreateGameAction\n  | RevealCellAction\n  | FlagCellAction\n  | ResetGameAction;\n\nexport interface GameState {\n  game: Game | null;\n}\n","enum GameStatus {\n  NotSet,\n  Playing,\n  Won,\n  Lost,\n}\n\nexport default GameStatus;\n","import React from 'react';\nimport cn from 'classnames';\nimport CellModel, { CellStatus } from 'models/Cell';\n\nimport './styles.scss';\n\ninterface CellProps {\n  cell: CellModel;\n  onReveal: (cell: CellModel) => void;\n  onFlag: (cell: CellModel) => void;\n}\n\nconst Cell: React.FC<CellProps> = ({ cell, onReveal, onFlag }) => {\n  const handleClick = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n    onReveal(cell);\n  };\n\n  const onContextMenu = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    event.preventDefault();\n    onFlag(cell);\n  };\n\n  const renderStatus = (cell: CellModel) => {\n    switch (cell.status) {\n      case CellStatus.Revealed:\n        return cell.neighborBombs ? cell.neighborBombs : '';\n      case CellStatus.Exploded:\n        return '💣';\n      case CellStatus.Flagged:\n        return '🏁';\n    }\n  };\n\n  return (\n    <button\n      className={cn('cell', `cell--${CellStatus[cell.status].toLowerCase()}`)}\n      onClick={handleClick}\n      onContextMenu={onContextMenu}\n    >\n      {renderStatus(cell)}\n    </button>\n  );\n};\n\nexport default Cell;\n","import GameOptions from 'models/GameOptions';\nimport Game from 'models/Game';\nimport Cell, { CellStatus } from 'models/Cell';\nimport GameStatus from 'models/GameStatus';\n\nexport enum ResultingAction {\n  Continue,\n  Won,\n  Lost,\n}\n\nclass MinesweeperController {\n  private static calcOneDimensionIndex(\n    rows: number,\n    row: number,\n    col: number\n  ): number {\n    return row * rows + col;\n  }\n\n  private static calcHasBomb(\n    bombsIndex: number[],\n    rows: number,\n    row: number,\n    col: number\n  ): boolean {\n    const index = MinesweeperController.calcOneDimensionIndex(rows, row, col);\n    const hasBomb = bombsIndex.includes(index);\n    return hasBomb;\n  }\n\n  private static calcNeighborBombs(\n    bombsIndex: number[],\n    rows: number,\n    cols: number,\n    row: number,\n    col: number\n  ): number {\n    let result = 0;\n    for (let r = -1; r <= 1; r++) {\n      const calRow = row + r;\n      if (calRow >= 0 && calRow < rows) {\n        for (let c = -1; c <= 1; c++) {\n          const calCol = col + c;\n          if (calCol >= 0 && calCol < cols) {\n            const hasBomb = MinesweeperController.calcHasBomb(\n              bombsIndex,\n              calRow,\n              rows,\n              calCol\n            );\n            hasBomb && result++;\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  private static calcCoveredCellsWithoutBomb(game: Game): number {\n    return game.board.reduce(\n      (prevCounter, row) =>\n        prevCounter +\n        row.filter(\n          (cell) => cell.status === CellStatus.Covered && !cell.hasBomb\n        ).length,\n      0\n    );\n  }\n\n  private static getNeighborCells(game: Game, cell: Cell): Cell[] {\n    const neighborCells: Cell[] = new Array<Cell>();\n    const { rows, cols } = game.options;\n    for (let r = -1; r <= 1; r++) {\n      const calRow = cell.row + r;\n      if (calRow >= 0 && calRow < rows) {\n        for (let c = -1; c <= 1; c++) {\n          if (r !== 0 || c !== 0) {\n            const calCol = cell.col + c;\n            if (calCol >= 0 && calCol < cols) {\n              neighborCells.push(game.board[calRow][calCol]);\n            }\n          }\n        }\n      }\n    }\n    return neighborCells;\n  }\n\n  public static createGame(options: GameOptions): Game {\n    const { rows, cols, bombs } = options;\n    const maxTileNumber = rows * cols;\n    const numOfBombs = Math.min(bombs, maxTileNumber);\n    const bombsIndexMapSet = new Set<number>();\n    while (bombsIndexMapSet.size < numOfBombs) {\n      bombsIndexMapSet.add(Math.floor(maxTileNumber * Math.random()));\n    }\n    const bombsIndexMap = Array.from(bombsIndexMapSet);\n    const cells = new Array<Array<Cell>>();\n    for (let r = 0; r < rows; r++) {\n      cells[r] = new Array<Cell>();\n      for (let c = 0; c < cols; c++) {\n        const hasBomb = MinesweeperController.calcHasBomb(\n          bombsIndexMap,\n          rows,\n          r,\n          c\n        );\n        const neighborBombs = MinesweeperController.calcNeighborBombs(\n          bombsIndexMap,\n          rows,\n          cols,\n          r,\n          c\n        );\n        cells[r].push({\n          row: r,\n          col: c,\n          status: CellStatus.Covered,\n          hasBomb,\n          neighborBombs,\n        } as Cell);\n      }\n    }\n\n    return { board: cells, options, status: GameStatus.Playing };\n  }\n\n  private static updateCell(board: Cell[][], cell: Cell): Cell[][] {\n    return board.map((row, index) =>\n      cell.row !== index\n        ? row\n        : row.map((rowCell, index) => (cell.col !== index ? rowCell : cell))\n    );\n  }\n\n  public static revealCell(game: Game, cell: Cell): Game {\n    if (\n      cell.status === CellStatus.Revealed ||\n      cell.status === CellStatus.Flagged\n    ) {\n      return game;\n    } else if (cell.hasBomb) {\n      console.log('Lost');\n      return {\n        ...game,\n        board: MinesweeperController.updateCell(game.board, {\n          ...cell,\n          status: CellStatus.Exploded,\n        }),\n        status: GameStatus.Lost,\n      };\n    } else {\n      const newGame = {\n        ...game,\n        board: MinesweeperController.updateCell(game.board, {\n          ...cell,\n          status: CellStatus.Revealed,\n        }),\n      };\n\n      if (MinesweeperController.calcCoveredCellsWithoutBomb(newGame) === 0) {\n        console.log('Won');\n        return {\n          ...newGame,\n          status: GameStatus.Won,\n        };\n      }\n\n      if (cell.neighborBombs === 0) {\n        return MinesweeperController.revealNeighborCells(newGame, cell);\n      }\n\n      return newGame;\n    }\n  }\n\n  public static revealNeighborCells(game: Game, cell: Cell): Game {\n    const neighborCells = MinesweeperController.getNeighborCells(game, cell);\n    return neighborCells.reduce(\n      (newGame, neighborCell) =>\n        MinesweeperController.revealCell(newGame, neighborCell),\n      game\n    );\n  }\n\n  public static flagCell(game: Game, cell: Cell): Game {\n    if (cell.status === CellStatus.Covered) {\n      return {\n        ...game,\n        board: MinesweeperController.updateCell(game.board, {\n          ...cell,\n          status: CellStatus.Flagged,\n        }),\n      };\n    } else if (cell.status === CellStatus.Flagged) {\n      return {\n        ...game,\n        board: MinesweeperController.updateCell(game.board, {\n          ...cell,\n          status: CellStatus.Covered,\n        }),\n      };\n    }\n\n    return game;\n  }\n}\n\nexport default MinesweeperController;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { boardSelector } from 'business/Game/selectors';\nimport Cell from 'components/app-components/Cell';\nimport { gameStatus as gameStatusSelector } from 'business/Game/selectors';\nimport { RevealCell, FlagCell } from 'business/Game/actions';\nimport GameStatusEnum from 'models/GameStatus';\n\nimport './styles.scss';\n\nconst Board: React.FC = () => {\n  const dispatch = useDispatch();\n  const cells = useSelector(boardSelector);\n  const gameStatus = useSelector(gameStatusSelector);\n\n  if (cells) {\n    return (\n      <div className=\"board\">\n        {cells.map((row, rIndex) => (\n          <div className=\"board__row\" key={`row${rIndex}`}>\n            {row.map((cell, cIndex) => (\n              <div className=\"board__cell\" key={`row${rIndex}-cell${cIndex}`}>\n                <Cell\n                  cell={cell}\n                  onReveal={(cell) => {\n                    if (gameStatus === GameStatusEnum.Playing) {\n                      dispatch(RevealCell(cell));\n                    }\n                  }}\n                  onFlag={(cell) => {\n                    if (gameStatus === GameStatusEnum.Playing) {\n                      dispatch(FlagCell(cell));\n                    }\n                  }}\n                />\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default Board;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { gameStatus as gameStatusSelector } from 'business/Game/selectors';\nimport GameStatusEnum from 'models/GameStatus';\nimport { ResetGame } from 'business/Game/actions';\n\nimport './styles.scss';\n\nconst GameStatus: React.FC<RouteComponentProps> = ({ history }) => {\n  const dispatch = useDispatch();\n  const gameStatus = useSelector(gameStatusSelector);\n\n  const handleOnClick = () => {\n    dispatch(ResetGame());\n    history.push('/');\n  };\n\n  return (\n    <div className=\"game-status\">\n      <p className=\"game-status__paragraph\">\n        <strong>Game Status: </strong>\n        {gameStatus === GameStatusEnum.Playing\n          ? 'You are Playing'\n          : gameStatus === GameStatusEnum.Won\n          ? 'You have WON 🥳'\n          : 'You have LOST 😢'}\n      </p>\n      <button className=\"game-status__button\" onClick={handleOnClick}>\n        Reset Game\n      </button>\n    </div>\n  );\n};\n\nexport default withRouter(GameStatus);\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport Board from 'components/app-components/Board';\nimport GameStatus from 'components/app-components/GameStatus';\nimport { gameStatus as gameStatusSelector } from 'business/Game/selectors';\n\nimport './styles.scss';\n\nconst GameBoard: React.FC<RouteComponentProps> = ({ history }) => {\n  const gameStatus = useSelector(gameStatusSelector);\n  useEffect(() => {\n    if (!gameStatus) {\n      history.push('/');\n    }\n  }, [gameStatus, history]);\n\n  return (\n    <div className=\"game-board\">\n      <h1 className=\"game-board__header\">Minesweeper</h1>\n      <Board />\n      <GameStatus />\n    </div>\n  );\n};\n\nexport default withRouter(GameBoard);\n","import {\n  GameState,\n  GameActions,\n  CREATE_GAME,\n  REVEAL_CELL,\n  FLAG_CELL,\n  RESET_GAME,\n} from './types';\nimport MinesweeperController from 'controller/MinesweeperController';\nimport Game from 'models/Game';\n\nconst initialState: GameState = {\n  game: null,\n};\n\nexport function GameReducer(\n  state = initialState,\n  action: GameActions\n): GameState {\n  switch (action.type) {\n    case CREATE_GAME:\n      return {\n        game: MinesweeperController.createGame(action.payload),\n      };\n\n    case REVEAL_CELL:\n      return {\n        game: MinesweeperController.revealCell(\n          state.game as Game,\n          action.payload\n        ),\n      };\n\n    case FLAG_CELL:\n      return {\n        game: MinesweeperController.flagCell(\n          state.game as Game,\n          action.payload\n        ),\n      };\n\n    case RESET_GAME:\n      return initialState;\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport { GameReducer } from 'business/Game/reducer';\n\nconst rootReducer = combineReducers({\n  minesweeper: GameReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport default rootReducer;\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState) {\n      return JSON.parse(serializedState);\n    }\n    return undefined;\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state: any) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (err) {}\n};\n","import configureStore from 'store/configureStore';\nimport { loadState, saveState } from 'components/helpers/localStorage';\n\nconst persistedState = loadState();\nexport const store = configureStore(persistedState);\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport rootReducer from './rootReducer';\n\nexport default function configureStore(preloadedState = {}) {\n  const composedEnhancers = composeWithDevTools();\n\n  const store = createStore(rootReducer, preloadedState, composedEnhancers);\n\n  if (process.env.NODE_ENV !== 'production' && module.hot) {\n    module.hot.accept('./rootReducer', () => store.replaceReducer(rootReducer));\n  }\n\n  return store;\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport GameSetup from 'components/app-components/GameSetup';\nimport GameBoard from 'components/app-components/GameBoard';\nimport { store } from 'store';\n\nimport './styles.scss';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route path=\"/board\">\n            <GameBoard />\n          </Route>\n          <Route path=\"/\">\n            <GameSetup />\n          </Route>\n        </Switch>\n      </Router>\n    </Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}