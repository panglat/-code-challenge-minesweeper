{"version":3,"sources":["business/Game/selectors.ts","models/Cell.ts","components/app-components/GameSetup/index.tsx","business/Game/actions.ts","business/Game/types.ts","models/GameStatus.ts","components/app-components/Cell/index.tsx","controller/MinesweeperController.ts","components/app-components/Board/index.tsx","components/app-components/GameStatus/index.tsx","components/app-components/GameBoard/index.tsx","business/Game/reducer.ts","store/rootReducer.ts","components/helpers/localStorage.tsx","store/index.js","store/configureStore.js","components/App/index.tsx","index.tsx"],"names":["CellStatus","boardSelector","state","minesweeper","game","board","gameStatus","status","withRouter","history","dispatch","useDispatch","useSelector","gameStatusSelector","useEffect","push","className","initialValues","rows","columns","level","validate","values","errors","onSubmit","levelWeight","bombs","Math","floor","type","payload","cols","validateOnMount","handleChange","handleBlur","handleSubmit","isValid","htmlFor","name","id","onChange","onBlur","value","maxLength","disabled","GameStatus","Cell","cell","onReveal","onFlag","cn","toLowerCase","onClick","event","preventDefault","onContextMenu","Revealed","neighborBombs","Exploded","Flagged","renderStatus","ResultingAction","Board","cells","map","row","rIndex","key","cIndex","GameStatusEnum","Playing","RevealCell","FlagCell","Won","MinesweeperController","col","bombsIndex","index","calcOneDimensionIndex","includes","result","r","calRow","c","calCol","calcHasBomb","reduce","prevCounter","filter","Covered","hasBomb","length","neighborCells","Array","options","maxTileNumber","numOfBombs","min","bombsIndexMapSet","Set","size","add","random","bombsIndexMap","from","calcNeighborBombs","rowCell","console","log","updateCell","Lost","newGame","calcCoveredCellsWithoutBomb","revealNeighborCells","getNeighborCells","neighborCell","revealCell","initialState","rootReducer","combineReducers","action","createGame","flagCell","store","preloadedState","composedEnhancers","composeWithDevTools","createStore","configureStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63370939.chunk.js","sourcesContent":["import { RootState } from 'store/rootReducer';\r\n\r\nexport const gameOptionsSelector = (state: RootState) =>\r\n  state.minesweeper.game?.options;\r\nexport const boardSelector = (state: RootState) =>\r\n  state.minesweeper.game?.board;\r\nexport const gameStatus = (state: RootState) => state.minesweeper.game?.status;\r\n","export enum CellStatus {\r\n  Covered,\r\n  Revealed,\r\n  Flagged,\r\n  Exploded,\r\n}\r\n\r\ninterface Cell {\r\n  row: number;\r\n  col: number;\r\n  hasBomb: boolean;\r\n  neighborBombs: number;\r\n  status: CellStatus;\r\n}\r\n\r\nexport default Cell;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\nimport { Formik, FormikProps } from 'formik';\r\nimport { CreateGame } from 'business/Game/actions';\r\nimport { gameStatus as gameStatusSelector } from 'business/Game/selectors';\r\n\r\nimport './styles.scss';\r\nimport GameStatus from 'models/GameStatus';\r\n\r\ninterface FormValues {\r\n  rows: number;\r\n  columns: number;\r\n  level: string;\r\n}\r\n\r\ninterface FormError {\r\n  rows?: string;\r\n  columns?: string;\r\n  level?: string;\r\n}\r\n\r\nconst GameSetup: React.FC<RouteComponentProps> = ({ history }) => {\r\n  const dispatch = useDispatch();\r\n  const gameStatus = useSelector(gameStatusSelector) as GameStatus;\r\n  useEffect(() => {\r\n    if (gameStatus) {\r\n      history.push('/board');\r\n    }\r\n  }, [gameStatus, history]);\r\n\r\n  return (\r\n    <div className=\"game-setup\">\r\n      <Formik\r\n        initialValues={{\r\n          rows: 10,\r\n          columns: 12,\r\n          level: 'medium',\r\n        }}\r\n        validate={(values: FormValues) => {\r\n          const errors: FormError = {};\r\n          if (!values.rows || values.rows < 4) {\r\n            errors.rows = 'At least 4 rows are required';\r\n          }\r\n          if (!values.columns || values.columns < 4) {\r\n            errors.columns = 'At least 4 columns are required';\r\n          }\r\n          if (!values.level) {\r\n            errors.level = 'Please select a level';\r\n          }\r\n          return errors;\r\n        }}\r\n        onSubmit={(values: FormValues) => {\r\n          const levelWeight =\r\n            values.level === 'easy'\r\n              ? 0.1\r\n              : values.level === 'medium'\r\n              ? 0.2\r\n              : 0.4;\r\n          const bombs = Math.floor(values.columns * values.rows * levelWeight);\r\n          dispatch(\r\n            CreateGame({ rows: values.rows, cols: values.columns, bombs })\r\n          );\r\n          history.push('/board');\r\n        }}\r\n        validateOnMount\r\n      >\r\n        {({\r\n          values,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          errors,\r\n          isValid,\r\n        }: FormikProps<FormValues>) => (\r\n          <form className=\"game-setup__form\" onSubmit={handleSubmit}>\r\n            <h1 className=\"game-setup__header\">Minesweeper</h1>\r\n            <div className=\"game-setup__group\">\r\n              <label className=\"game-setup__label\" htmlFor=\"gameRows\">\r\n                Rows:\r\n                <br />\r\n                <input\r\n                  name=\"rows\"\r\n                  className=\"game-setup__input-text\"\r\n                  type=\"number\"\r\n                  id=\"gameRows\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.rows}\r\n                  maxLength={2}\r\n                />\r\n                {errors.rows && (\r\n                  <>\r\n                    <br />\r\n                    <span className=\"game-setup__error\">{errors.rows}</span>\r\n                  </>\r\n                )}\r\n              </label>\r\n            </div>\r\n            <div className=\"game-setup__group\">\r\n              <label className=\"game-setup__label\" htmlFor=\"gameColumns\">\r\n                Columns:\r\n                <br />\r\n                <input\r\n                  name=\"columns\"\r\n                  className=\"game-setup__input-text\"\r\n                  type=\"number\"\r\n                  id=\"gameColumns\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.columns}\r\n                  maxLength={2}\r\n                />\r\n                {errors.columns && (\r\n                  <>\r\n                    <br />\r\n                    <span className=\"game-setup__error\">{errors.columns}</span>\r\n                  </>\r\n                )}\r\n              </label>\r\n            </div>\r\n            <div className=\"game-setup__group\">\r\n              <label className=\"game-setup__label\" htmlFor=\"gameLevel\">\r\n                Level:\r\n                <br />\r\n                <select\r\n                  name=\"level\"\r\n                  className=\"game-setup__input-text\"\r\n                  id=\"gameLevel\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.level}\r\n                >\r\n                  <option value=\"easy\">Easy</option>\r\n                  <option value=\"medium\">Medium</option>\r\n                  <option value=\"hard\">Hard</option>\r\n                </select>\r\n              </label>\r\n              {errors.level && (\r\n                <>\r\n                  <br />\r\n                  <span className=\"game-setup__error\">{errors.level}</span>\r\n                </>\r\n              )}\r\n            </div>\r\n            <div className=\"game-setup__button-group\">\r\n              <button\r\n                type=\"submit\"\r\n                disabled={!isValid}\r\n                className=\"game-setup__button\"\r\n              >\r\n                Save\r\n              </button>\r\n            </div>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(GameSetup);\r\n","import {\r\n  CREATE_GAME,\r\n  GameActions,\r\n  REVEAL_CELL,\r\n  FLAG_CELL,\r\n  RESET_GAME,\r\n} from './types';\r\nimport GameOptions from 'models/GameOptions';\r\nimport Cell from 'models/Cell';\r\n\r\nexport function CreateGame(gameOptions: GameOptions): GameActions {\r\n  return {\r\n    type: CREATE_GAME,\r\n    payload: gameOptions,\r\n  };\r\n}\r\n\r\nexport function RevealCell(cell: Cell): GameActions {\r\n  return {\r\n    type: REVEAL_CELL,\r\n    payload: cell,\r\n  };\r\n}\r\n\r\nexport function FlagCell(cell: Cell): GameActions {\r\n  return {\r\n    type: FLAG_CELL,\r\n    payload: cell,\r\n  };\r\n}\r\n\r\nexport function ResetGame(): GameActions {\r\n  return {\r\n    type: RESET_GAME,\r\n  };\r\n}\r\n","import GameOptions from 'models/GameOptions';\r\nimport Game from 'models/Game';\r\nimport Cell from 'models/Cell';\r\n\r\nexport const CREATE_GAME = 'CREATE_GAME';\r\nexport const REVEAL_CELL = 'REVEAL_CELL';\r\nexport const FLAG_CELL = 'FLAG_CELL';\r\nexport const RESET_GAME = 'RESET_GAME';\r\n\r\ninterface CreateGameAction {\r\n  type: typeof CREATE_GAME;\r\n  payload: GameOptions;\r\n}\r\n\r\ninterface RevealCellAction {\r\n  type: typeof REVEAL_CELL;\r\n  payload: Cell;\r\n}\r\n\r\ninterface FlagCellAction {\r\n  type: typeof FLAG_CELL;\r\n  payload: Cell;\r\n}\r\n\r\ninterface ResetGameAction {\r\n  type: typeof RESET_GAME;\r\n}\r\n\r\nexport type GameActions =\r\n  | CreateGameAction\r\n  | RevealCellAction\r\n  | FlagCellAction\r\n  | ResetGameAction;\r\n\r\nexport interface GameState {\r\n  game: Game | null;\r\n}\r\n","enum GameStatus {\r\n  NotSet,\r\n  Playing,\r\n  Won,\r\n  Lost,\r\n}\r\n\r\nexport default GameStatus;\r\n","import React from 'react';\r\nimport cn from 'classnames';\r\nimport CellModel, { CellStatus } from 'models/Cell';\r\n\r\nimport './styles.scss';\r\n\r\ninterface CellProps {\r\n  cell: CellModel;\r\n  onReveal: (cell: CellModel) => void;\r\n  onFlag: (cell: CellModel) => void;\r\n}\r\n\r\nconst Cell: React.FC<CellProps> = ({ cell, onReveal, onFlag }) => {\r\n  const handleClick = (\r\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ) => {\r\n    event.preventDefault();\r\n    onReveal(cell);\r\n  };\r\n\r\n  const onContextMenu = (\r\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ) => {\r\n    event.preventDefault();\r\n    onFlag(cell);\r\n  };\r\n\r\n  const renderStatus = (cell: CellModel) => {\r\n    switch (cell.status) {\r\n      case CellStatus.Revealed:\r\n        return cell.neighborBombs ? cell.neighborBombs : '';\r\n      case CellStatus.Exploded:\r\n        return '💣';\r\n      case CellStatus.Flagged:\r\n        return '🏁';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className={cn('cell', `cell--${CellStatus[cell.status].toLowerCase()}`)}\r\n      onClick={handleClick}\r\n      onContextMenu={onContextMenu}\r\n    >\r\n      {renderStatus(cell)}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import GameOptions from 'models/GameOptions';\r\nimport Game from 'models/Game';\r\nimport Cell, { CellStatus } from 'models/Cell';\r\nimport GameStatus from 'models/GameStatus';\r\n\r\nexport enum ResultingAction {\r\n  Continue,\r\n  Won,\r\n  Lost,\r\n}\r\n\r\nclass MinesweeperController {\r\n  private static calcOneDimensionIndex(\r\n    rows: number,\r\n    row: number,\r\n    col: number\r\n  ): number {\r\n    return row * rows + col;\r\n  }\r\n\r\n  private static calcHasBomb(\r\n    bombsIndex: number[],\r\n    rows: number,\r\n    row: number,\r\n    col: number\r\n  ): boolean {\r\n    const index = MinesweeperController.calcOneDimensionIndex(rows, row, col);\r\n    const hasBomb = bombsIndex.includes(index);\r\n    return hasBomb;\r\n  }\r\n\r\n  private static calcNeighborBombs(\r\n    bombsIndex: number[],\r\n    rows: number,\r\n    cols: number,\r\n    row: number,\r\n    col: number\r\n  ): number {\r\n    let result = 0;\r\n    for (let r = -1; r <= 1; r++) {\r\n      const calRow = row + r;\r\n      if (calRow >= 0 && calRow < rows) {\r\n        for (let c = -1; c <= 1; c++) {\r\n          const calCol = col + c;\r\n          if (calCol >= 0 && calCol < cols) {\r\n            const hasBomb = MinesweeperController.calcHasBomb(\r\n              bombsIndex,\r\n              calRow,\r\n              rows,\r\n              calCol\r\n            );\r\n            hasBomb && result++;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private static calcCoveredCellsWithoutBomb(game: Game): number {\r\n    return game.board.reduce(\r\n      (prevCounter, row) =>\r\n        prevCounter +\r\n        row.filter(\r\n          (cell) => cell.status === CellStatus.Covered && !cell.hasBomb\r\n        ).length,\r\n      0\r\n    );\r\n  }\r\n\r\n  private static getNeighborCells(game: Game, cell: Cell): Cell[] {\r\n    const neighborCells: Cell[] = new Array<Cell>();\r\n    const { rows, cols } = game.options;\r\n    for (let r = -1; r <= 1; r++) {\r\n      const calRow = cell.row + r;\r\n      if (calRow >= 0 && calRow < rows) {\r\n        for (let c = -1; c <= 1; c++) {\r\n          if (r !== 0 || c !== 0) {\r\n            const calCol = cell.col + c;\r\n            if (calCol >= 0 && calCol < cols) {\r\n              neighborCells.push(game.board[calRow][calCol]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return neighborCells;\r\n  }\r\n\r\n  public static createGame(options: GameOptions): Game {\r\n    const { rows, cols, bombs } = options;\r\n    const maxTileNumber = rows * cols;\r\n    const numOfBombs = Math.min(bombs, maxTileNumber);\r\n    const bombsIndexMapSet = new Set<number>();\r\n    while (bombsIndexMapSet.size < numOfBombs) {\r\n      bombsIndexMapSet.add(Math.floor(maxTileNumber * Math.random()));\r\n    }\r\n    const bombsIndexMap = Array.from(bombsIndexMapSet);\r\n    const cells = new Array<Array<Cell>>();\r\n    for (let r = 0; r < rows; r++) {\r\n      cells[r] = new Array<Cell>();\r\n      for (let c = 0; c < cols; c++) {\r\n        const hasBomb = MinesweeperController.calcHasBomb(\r\n          bombsIndexMap,\r\n          rows,\r\n          r,\r\n          c\r\n        );\r\n        const neighborBombs = MinesweeperController.calcNeighborBombs(\r\n          bombsIndexMap,\r\n          rows,\r\n          cols,\r\n          r,\r\n          c\r\n        );\r\n        cells[r].push({\r\n          row: r,\r\n          col: c,\r\n          status: CellStatus.Covered,\r\n          hasBomb,\r\n          neighborBombs,\r\n        } as Cell);\r\n      }\r\n    }\r\n\r\n    return { board: cells, options, status: GameStatus.Playing };\r\n  }\r\n\r\n  private static updateCell(board: Cell[][], cell: Cell): Cell[][] {\r\n    return board.map((row, index) =>\r\n      cell.row !== index\r\n        ? row\r\n        : row.map((rowCell, index) => (cell.col !== index ? rowCell : cell))\r\n    );\r\n  }\r\n\r\n  public static revealCell(game: Game, cell: Cell): Game {\r\n    if (\r\n      cell.status === CellStatus.Revealed ||\r\n      cell.status === CellStatus.Flagged\r\n    ) {\r\n      return game;\r\n    } else if (cell.hasBomb) {\r\n      console.log('Lost');\r\n      return {\r\n        ...game,\r\n        board: MinesweeperController.updateCell(game.board, {\r\n          ...cell,\r\n          status: CellStatus.Exploded,\r\n        }),\r\n        status: GameStatus.Lost,\r\n      };\r\n    } else {\r\n      const newGame = {\r\n        ...game,\r\n        board: MinesweeperController.updateCell(game.board, {\r\n          ...cell,\r\n          status: CellStatus.Revealed,\r\n        }),\r\n      };\r\n\r\n      if (MinesweeperController.calcCoveredCellsWithoutBomb(newGame) === 0) {\r\n        console.log('Won');\r\n        return {\r\n          ...newGame,\r\n          status: GameStatus.Won,\r\n        };\r\n      }\r\n\r\n      if (cell.neighborBombs === 0) {\r\n        return MinesweeperController.revealNeighborCells(newGame, cell);\r\n      }\r\n\r\n      return newGame;\r\n    }\r\n  }\r\n\r\n  public static revealNeighborCells(game: Game, cell: Cell): Game {\r\n    const neighborCells = MinesweeperController.getNeighborCells(game, cell);\r\n    return neighborCells.reduce(\r\n      (newGame, neighborCell) =>\r\n        MinesweeperController.revealCell(newGame, neighborCell),\r\n      game\r\n    );\r\n  }\r\n\r\n  public static flagCell(game: Game, cell: Cell): Game {\r\n    if (cell.status === CellStatus.Covered) {\r\n      return {\r\n        ...game,\r\n        board: MinesweeperController.updateCell(game.board, {\r\n          ...cell,\r\n          status: CellStatus.Flagged,\r\n        }),\r\n      };\r\n    } else if (cell.status === CellStatus.Flagged) {\r\n      return {\r\n        ...game,\r\n        board: MinesweeperController.updateCell(game.board, {\r\n          ...cell,\r\n          status: CellStatus.Covered,\r\n        }),\r\n      };\r\n    }\r\n\r\n    return game;\r\n  }\r\n}\r\n\r\nexport default MinesweeperController;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { boardSelector } from 'business/Game/selectors';\r\nimport Cell from 'components/app-components/Cell';\r\nimport { gameStatus as gameStatusSelector } from 'business/Game/selectors';\r\nimport { RevealCell, FlagCell } from 'business/Game/actions';\r\nimport GameStatusEnum from 'models/GameStatus';\r\n\r\nimport './styles.scss';\r\n\r\nconst Board: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const cells = useSelector(boardSelector);\r\n  const gameStatus = useSelector(gameStatusSelector);\r\n\r\n  if (cells) {\r\n    return (\r\n      <div className=\"board\">\r\n        {cells.map((row, rIndex) => (\r\n          <div className=\"board__row\" key={`row${rIndex}`}>\r\n            {row.map((cell, cIndex) => (\r\n              <div className=\"board__cell\" key={`row${rIndex}-cell${cIndex}`}>\r\n                <Cell\r\n                  cell={cell}\r\n                  onReveal={(cell) => {\r\n                    if (gameStatus === GameStatusEnum.Playing) {\r\n                      dispatch(RevealCell(cell));\r\n                    }\r\n                  }}\r\n                  onFlag={(cell) => {\r\n                    if (gameStatus === GameStatusEnum.Playing) {\r\n                      dispatch(FlagCell(cell));\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\nimport { gameStatus as gameStatusSelector } from 'business/Game/selectors';\r\nimport GameStatusEnum from 'models/GameStatus';\r\nimport { ResetGame } from 'business/Game/actions';\r\n\r\nimport './styles.scss';\r\n\r\nconst GameStatus: React.FC<RouteComponentProps> = ({ history }) => {\r\n  const dispatch = useDispatch();\r\n  const gameStatus = useSelector(gameStatusSelector);\r\n\r\n  const handleOnClick = () => {\r\n    dispatch(ResetGame());\r\n    history.push('/');\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-status\">\r\n      <p className=\"game-status__paragraph\">\r\n        <strong>Game Status: </strong>\r\n        {gameStatus === GameStatusEnum.Playing\r\n          ? 'You are Playing'\r\n          : gameStatus === GameStatusEnum.Won\r\n          ? 'You have WON 🥳'\r\n          : 'You have LOST 😢'}\r\n      </p>\r\n      <button className=\"game-status__button\" onClick={handleOnClick}>\r\n        Reset Game\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(GameStatus);\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\nimport Board from 'components/app-components/Board';\r\nimport GameStatus from 'components/app-components/GameStatus';\r\nimport { gameStatus as gameStatusSelector } from 'business/Game/selectors';\r\n\r\nimport './styles.scss';\r\n\r\nconst GameBoard: React.FC<RouteComponentProps> = ({ history }) => {\r\n  const gameStatus = useSelector(gameStatusSelector);\r\n  useEffect(() => {\r\n    if (!gameStatus) {\r\n      history.push('/');\r\n    }\r\n  }, [gameStatus, history]);\r\n\r\n  return (\r\n    <div className=\"game-board\">\r\n      <h1 className=\"game-board__header\">Minesweeper</h1>\r\n      <Board />\r\n      <GameStatus />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(GameBoard);\r\n","import {\r\n  GameState,\r\n  GameActions,\r\n  CREATE_GAME,\r\n  REVEAL_CELL,\r\n  FLAG_CELL,\r\n  RESET_GAME,\r\n} from './types';\r\nimport MinesweeperController from 'controller/MinesweeperController';\r\nimport Game from 'models/Game';\r\n\r\nconst initialState: GameState = {\r\n  game: null,\r\n};\r\n\r\nexport function GameReducer(\r\n  state = initialState,\r\n  action: GameActions\r\n): GameState {\r\n  switch (action.type) {\r\n    case CREATE_GAME:\r\n      return {\r\n        game: MinesweeperController.createGame(action.payload),\r\n      };\r\n\r\n    case REVEAL_CELL:\r\n      return {\r\n        game: MinesweeperController.revealCell(\r\n          state.game as Game,\r\n          action.payload\r\n        ),\r\n      };\r\n\r\n    case FLAG_CELL:\r\n      return {\r\n        game: MinesweeperController.flagCell(\r\n          state.game as Game,\r\n          action.payload\r\n        ),\r\n      };\r\n\r\n    case RESET_GAME:\r\n      return initialState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { GameReducer } from 'business/Game/reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  minesweeper: GameReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport default rootReducer;\r\n","export const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state');\r\n    if (serializedState) {\r\n      return JSON.parse(serializedState);\r\n    }\r\n    return undefined;\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const saveState = (state: any) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem('state', serializedState);\r\n  } catch (err) {}\r\n};\r\n","import configureStore from 'store/configureStore';\r\nimport { loadState, saveState } from 'components/helpers/localStorage';\r\n\r\nconst persistedState = loadState();\r\nexport const store = configureStore(persistedState);\r\n\r\nstore.subscribe(() => {\r\n  saveState(store.getState());\r\n});\r\n","import { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport rootReducer from './rootReducer';\r\n\r\nexport default function configureStore(preloadedState = {}) {\r\n  const composedEnhancers = composeWithDevTools();\r\n\r\n  const store = createStore(rootReducer, preloadedState, composedEnhancers);\r\n\r\n  if (process.env.NODE_ENV !== 'production' && module.hot) {\r\n    module.hot.accept('./rootReducer', () => store.replaceReducer(rootReducer));\r\n  }\r\n\r\n  return store;\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport GameSetup from 'components/app-components/GameSetup';\r\nimport GameBoard from 'components/app-components/GameBoard';\r\nimport { store } from 'store';\r\n\r\nimport './styles.scss';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/board\">\r\n            <GameBoard />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <GameSetup />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from 'components/App';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}